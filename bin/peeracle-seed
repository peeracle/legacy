#!/usr/bin/env node

'use strict';

var fs = require('fs');
var program = require('commander');
var observatory = require('observatory').settings({
  prefix: ' - '
});

var Peeracle = require('../index');

var mediaFile = null;
var metadataFilename;
var metadataBytes;

/** @type {Peeracle.BinaryStream} */
var metadataStream;

/** @type {Peeracle} */
var session;

var metadataTask;
var metadata;
var unserializer;

var mediaTask;
var checkTask;

program
  .usage('[options] <metadataFile>')
  .option('-m, --media <filename>', 'Media file associated to the metadata file')
  .parse(process.argv);

metadataFilename = program.args;
if (!metadataFilename.length) {
  program.outputHelp();
  process.exit(1);
}

try {
  metadataBytes = fs.readFileSync(metadataFilename[0]);
} catch (e) {
  console.error('Cannot read file \'' + metadataFilename[0] + '\': ' + e.message);
  process.exit(1);
}

metadataTask = observatory.add('Loading metadata file');
metadata = new Peeracle.Metadata();
unserializer = new Peeracle.MetadataUnserializer();

metadataTask.status('Reading');
metadataStream = new Peeracle.DataStream.Memory(new Uint8Array(metadataBytes));

metadataTask.status('Unserializing');
unserializer.unserialize(metadataStream, metadata);
metadataTask.done('Done');

session = new Peeracle();

session.on('connect', function (trackerUrl, id) {
  console.log('connect', trackerUrl, id);
});

session.on('disconnect', function (trackerUrl) {
  console.log('disconnect', trackerUrl);
});

session.on('enter', function (trackerUrl, hash, peer) {
  console.log('enter', trackerUrl, hash, peer);
});

session.on('leave', function (trackerUrl, hash, peer) {
  console.log('leave', trackerUrl, hash, peer);
});

session.on('metadata', function (hash, got) {
  console.log('metadata', hash, got);
  session.start(hash);
});

session.on('send', function (hash, peer, bytes) {
  console.log('send', hash, peer, bytes.length);
});

session.on('receive', function (hash, peer, bytes) {
  console.log('receive', hash, peer, bytes.length);
});

session.on('segment', function (hash, index, bytes) {
  console.log('segment', hash, index, bytes);
});

if (program.media) {
  mediaTask = observatory.add('Loading media file');
  mediaFile = new Peeracle.DataSource.File(program.media);
  Peeracle.Media.createInstance(mediaFile, function createInstance(media) {
    mediaTask.done('Done');
    checkTask = observatory.add('Checking media file');
    session.addMetadata(metadata, media, function () {
      checkTask.done('Done');
    });
  });
} else {
  session.addMetadata(metadata, null, function () {
    session.retrieve(metadata.getId(), 1);
  });
}