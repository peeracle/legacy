#!/usr/bin/env node

'use strict';

var fs = require('fs');
var program = require('commander');
var Peeracle = require('../index');
var observatory = require('observatory').settings({
  prefix: ' - '
});

function list(val) {
  return val.split(',');
}

program
  .usage('[options] -o <output> <filename>')
  .option('-t, --trackers <urlA,urlB,...>', 'List of trackers urls, splitted with commas', list)
  .option('-o, --output <filename>', 'Output filename for the resulting metadata file')
  .option('-c, --crypto <crypto>', 'Cryptographic algorithm used for hashing')
  .parse(process.argv);

var files = program.args;
if (!files.length) {
  program.outputHelp();
  process.exit(1);
}

if (!program.output) {
  program.outputHelp();
  process.exit(1);
}

var crypto = program.crypto || 'murmur3_x86_128';
var trackers = program.trackers || ['ws://127.0.0.1:8080'];

function dumpMetadata() {
  metadata.trackers = trackers;
  var serializer = new Peeracle.MetadataSerializer();
  var bytes = serializer.serialize(metadata);
  fs.writeFileSync(program.output, new Buffer(bytes));
}

function processMedia(mediaFormat, file) {
  var media = Peeracle.Media[mediaFormat].create(file);
  var i = 0;
  var task = observatory.add('Reading media');
  task.status('Fetching init segment');
  metadata = new Peeracle.Metadata();
  metadata.setCryptoId(crypto);
  metadata.addStream(media, function () {
    task.done('Done');
    dumpMetadata();
  });
  /*media.getInitSegment(function (init) {
    task.done('Done');
    task = observatory.add('Fetching media segment');
    metadata = new Peeracle.Metadata();
    metadata.setCryptoId(crypto);
    metadata.calculateChunkSize(file.getLength());
    var bytes = [];
    for (var b = 0, len = init.length; b < len; ++b) {
      bytes.push(init[b]);
    }
    metadata.setInitSegment(bytes);
    task.status('In Progress');
    media.getNextMediaSegment(function getCluster(cluster) {
      if (!cluster) {
        task.done('Done');
        task = observatory.add('Writing metadata');
        task.status('Writing');
        dumpMetadata();
        task.done('Done');
        return;
      }
      metadata.addMediaSegment(cluster.timecode, cluster.bytes);
      task.details(++i + ' cluster(s)');
      media.getNextMediaSegment(getCluster);
    });
  });*/
}

var metadata = new Peeracle.Metadata();
metadata.hashId = crypto;

function createDataSource(handle) {
  if (typeof handle !== 'string') {
    return null;
  }

  if (handle.slice(0, 7) === 'http://' ||
    handle.slice(0, 8) === 'https://') {
    return new Peeracle.DataSource.Http(handle);
  }
  return new Peeracle.DataSource.File(handle);
}

var f = 0;
var file = createDataSource(files[f]);
Peeracle.Media.createInstance(file, function doFile (media) {
  if (!media) {
    console.log('No media');
    return;
  }
  metadata.addStream(media, function () {
    if (++f < files.length) {
      file = createDataSource(files[f]);
      Peeracle.Media.createInstance(file, doFile);
    } else {
      dumpMetadata();
    }
  });
});
